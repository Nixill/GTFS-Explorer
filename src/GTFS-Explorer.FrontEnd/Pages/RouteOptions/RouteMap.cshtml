@page "{routeId}"
@model GTFS_Explorer.FrontEnd.Pages.RouteOptions.RouteMapModel
@{
	ViewData["Title"] = "RouteMap";
}
@using GTFS_Explorer.Core.Models.Structs
@using GTFS_Explorer.Core.Extensions
@using System.Linq

<section>
 <div class="header">
	<div class="header-right">
	 <a asp-page="/RouteOptions/RouteSummary" asp-route-routeId="@Model.RouteId">Summary</a>
	 <a class="active" asp-page="/RouteOptions/RouteMap" asp-route-routeId="@Model.RouteId">Route Map</a>
	 <a asp-page="/RouteOptions/StopList" asp-route-routeId="@Model.RouteId">Stop List</a>
	 <a asp-page="/RouteOptions/Schedule" asp-route-routeId="@Model.RouteId">Schedule</a>
	</div>
 </div>
 <div class="floater container">
	<div class="row h-100 d-block" id="route-map"></div>
 </div>
 <form>
	<input type="file" id="selectFile" class="hidden" />
	<label class="select-file" for="selectFile">Select New File</label>
	<a asp-page="/MainPages/Routes" id="returnToRoutes" />
	<label class="select-file" for="returnToRoutes">Return to Routes</label>
 </form>
</section>

@section Scripts
{
<script>
	const routeMap = L.map('route-map').setView([51.5, -0.09], 13);
	const osmAttribution = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';
	const osmTileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';

	const tiles = L.tileLayer(osmTileUrl, {
		attribution: osmAttribution
	});

	tiles.addTo(routeMap);

	// Add the route lines to the map
	const lines = @(
		"[" + string.Join(", ",
		Model.RouteShapes.Select(x => "[" + string.Join(", ",
		x.Select(y => "[" + y.Latitude + ", " + y.Longitude + "]"))
		+ "]"))
		+ "]"
		);

	const colors = ['#@Model.RouteColors.Item1.ToRGBHexString()', '#@Model.RouteColors.Item2.ToRGBHexString()'];

	const drawnLines = L.polyline(lines, { color: colors[1], weight: 5 }).addTo(routeMap);
	L.polyline(lines, { color: colors[0], weight: 3 }).addTo(routeMap);

	// Add the stops to the map, but don't display them immediately
	const timepoints = L.layerGroup();
	const nonTimepoints = L.layerGroup();

	var marker;

	@foreach(var stop in Model.RouteStops) {
		@:marker = L.marker([@stop.Item1.Latitude, @stop.Item1.Longitude], {title: '@stop.Item1.Name.Replace("'", "\'")'});
		if (stop.Item2) {
			@:marker.addTo(timepoints);
		} else {
			@:marker.addTo(nonTimepoints);
		}
	}

	// Add the zoom handler
	routeMap.on('zoomend', function() {
		var zoom = routeMap.getZoom();

		if (zoom >= 11) {
			if (!routeMap.hasLayer(timepoints)) routeMap.addLayer(timepoints);
		} else {
			if (routeMap.hasLayer(timepoints)) routeMap.removeLayer(timepoints);
		}

		if (zoom >= 15) {
			if (!routeMap.hasLayer(nonTimepoints)) routeMap.addLayer(nonTimepoints);
		} else {
			if (routeMap.hasLayer(nonTimepoints)) routeMap.removeLayer(nonTimepoints);
		}
	});

	routeMap.fitBounds(drawnLines.getBounds());
</script>
}